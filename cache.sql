SET TERM ^ ;
CREATE PROCEDURE USPGETRVLISTBYUSER (
    IN_USERKEY Varchar(36),
    IN_ONLYSHOWMR Char(1),
    IN_RVKEY Varchar(36) DEFAULT NULL,
    IN_PARTSREPLACED Char(1) DEFAULT NULL,
    IN_PARTSTOREPLACE Char(1) DEFAULT NULL,
    IN_PARTSONORDER Char(1) DEFAULT NULL,
    IN_PARTSNOTGOOD Char(1) DEFAULT NULL,
    IN_COMINGDUETYPE Integer DEFAULT NULL,
    IN_INCLUDEPASTDUE Char(1) DEFAULT NULL,
    IN_USINGFIELD Varchar(100) DEFAULT NULL,
    IN_DATEFROM Varchar(10) DEFAULT NULL,
    IN_DATETO Varchar(10) DEFAULT NULL,
    IN_ANDOR Varchar(10) DEFAULT ' AND ',
    IN_IMAGE Char(1) DEFAULT NULL,
    IN_GENERIC Char(1) DEFAULT NULL,
    IN_AR Char(1) DEFAULT NULL,
    IN_TODO Char(1) DEFAULT NULL,
    IN_INPART Char(1) DEFAULT NULL,
    IN_INAR Char(1) DEFAULT NULL,
    IN_INWELD Char(1) DEFAULT NULL,
    IN_INPOSITIONER Char(1) DEFAULT NULL,
    IN_INLOCATION Char(1) DEFAULT NULL,
    IN_INGENERIC Char(1) DEFAULT NULL,
    IN_FILTERCLAUSE Varchar(8000) DEFAULT NULL,
    IN_UNIT Varchar(40) DEFAULT NULL,
    IN_TARFILTER Varchar(50) DEFAULT NULL,
    IN_TARFILTERLABEL Varchar(100) DEFAULT NULL )
RETURNS (
    RETMULDATASETS Char(1),
    SQL Varchar(30000) )
AS
/*
SELECT p.*
FROM USPGETRVLISTBYUSER('442172448396154124', NULL, NULL, 'F', 'F', 'F', 'F', 1, 'T', NULL, NULL, NULL, ' OR ', 'F', 'F', 'F','F', 'F', 'F', 'F', 'F', 'F', 'F') p
*/

/******************************************************************************
**  File:        uspGetRVListByUser.sql
**  Description: Returns RV list
**  Returns:     
**  Params:      @UserID - The logged on users number
**               @OwnerKey
**				 @PlantKey
*******************************************************************************
**  Change History
*******************************************************************************
**	Author	        Date	    TFS	    Description
**	Tony.Cai	    2010/05/04	n/a  	Original.
**	Marco Cao		2014/08/07				Add unit filter
**	Jerry Chen		2016/11/03	N/A		US163988 implement the "events with parts filter" in VKV
**	DE45329: Limit Grid To...: only display the repair which has parts if no part filter is applied
**  Jerry Chen   2017/01/03		PRETEST AVERAGE, FINALTEST AVERAGE, MONTHGAP BETWEEN LAST REPAIR AND DATE TESTED
**  Jerry Chen   2017/01/17		DE49917 verify the set change calculation for pretest and pretest leaked
**	Robin Lu		2017/1/22		us186012--VKV: # months gap between last 2 VK events calculated column, verify the SQL
**	Jerry Chen		2017/02/06		DE50972	VKV: Pressure Analysis column is not calculated correct
**	Jerry chen   2017/11/02		US257523	VKV: general analyze needs to inform user of filter and allow "all owners/plants"
**	Ben Song     2018/1/27		US281932	VKV: # of parts to replace next repair count needs to be improved
**	Jerry Chen	2018/1/30		US285207	VKV: pretest % of cdtp column (and pretest leaked % cdtp column) have bug when set pressure changed
**	Jerry Chen	2018/02/05		US292234	(Copy of) VKV: Remember user selected valve list
**	Ben Song	2018/02/06		US288304    VKV:New columns: Previous event's Next Maint and Next Test Date
**	Jerry Chen  2018/02/09		N/A    Change the month gap column calculation = day*10000/304375
**	Ben Song     2018/02/12		US92485	VKV_Filter: Filter/Sort in All Equipment and One Equipment should be saved separately and not effected by each other
**	Ben Song     2018/03/01		DE81672	VKV_Filter: the advanced filter is not applied under One Equipment view
**	Ben Song     2018/03/28		US309262	VKV: Redesign these function Comment - Previous Events, # Parts Replaced Next, # Parts - Previous Event
**	Jerry Chen	2018/03/28		DE84055	VKV: repair list header filter on virtual columns cause error
*******************************************************************************/
DECLARE VARIABLE CREATEDATE VARCHAR(30); 
DECLARE VARIABLE EditDate Varchar(10);
DECLARE VARIABLE GridDataSource Varchar(100);
DECLARE VARIABLE DateFilterClause VARCHAR(20000);
DECLARE VARIABLE FilterCtrlClause VARCHAR(20000);
DECLARE VARIABLE HeaderFilterCtrlClause VARCHAR(20000);
DECLARE VARIABLE LimitSQL VARCHAR(20000);
DECLARE VARIABLE FilterSQL VARCHAR(20000);
DECLARE VARIABLE HeaderFilterSQL VARCHAR(20000);
DECLARE VARIABLE EquipKey VARCHAR(36);
DECLARE VARIABLE ComingDueFrom Varchar(10);
DECLARE VARIABLE ComingDueTo Varchar(10);
DECLARE VARIABLE TempSQL Varchar(20000);
DECLARE VARIABLE SelectedColumns1 VARCHAR(20000);
DECLARE VARIABLE SelectedColumns2 VARCHAR(20000);
DECLARE VARIABLE OwnerNameColumn VARCHAR(500);
DECLARE VARIABLE PlantLocationColumn VARCHAR(500);
DECLARE VARIABLE PlantAreaColumn VARCHAR(500);
DECLARE VARIABLE ImgCountColumn VARCHAR(500);
DECLARE VARIABLE GenCountColumn VARCHAR(500);
DECLARE VARIABLE ARCountColumn VARCHAR(500);
DECLARE VARIABLE ToDoCountColumn VARCHAR(500);
DECLARE VARIABLE PartCountColumn VARCHAR(500);
DECLARE VARIABLE PartReplacedCountColumn VARCHAR(500);
DECLARE VARIABLE PartToPlaceCountColumn VARCHAR(500);
DECLARE VARIABLE PartOnOrderCountColumn VARCHAR(500);
DECLARE VARIABLE PartNotGoodCountColumn VARCHAR(1500);
DECLARE VARIABLE PartsFilterCountColumn VARCHAR(1500);
DECLARE VARIABLE V_PARTFILTERSQL VARCHAR(1500);
DECLARE VARIABLE EventCountColumn VARCHAR(500);
DECLARE VARIABLE ValveSizeColumn VARCHAR(500);
DECLARE VARIABLE NextMainDateYYYYColumn VARCHAR(500);
DECLARE VARIABLE NextMainDateYYMMColumn VARCHAR(500);
DECLARE VARIABLE NextTestDateYYYYColumn VARCHAR(500);
DECLARE VARIABLE NextTestDateYYMMColumn VARCHAR(500);
DECLARE VARIABLE DateTestedYYYYColumn VARCHAR(500);
DECLARE VARIABLE DateTestedYYMMColumn VARCHAR(500);
DECLARE VARIABLE DateReceivedYYYYColumn VARCHAR(500);
DECLARE VARIABLE DateReceivedYYMMColumn VARCHAR(500);
DECLARE VARIABLE DateTestedEffectiveColumn VARCHAR(500);
DECLARE VARIABLE MonthGapColumn VARCHAR(5000);
DECLARE VARIABLE InvisibleVKVSql VARCHAR(1000);
DECLARE VARIABLE FilterCountJoin VARCHAR(20000);
DECLARE VARIABLE SinceTestedColumn VARCHAR(500);
DECLARE VARIABLE PastDueColumn VARCHAR(500);
DECLARE VARIABLE TillDueColumn VARCHAR(500);
DECLARE VARIABLE MonthsGapColumn VARCHAR(5000);
DECLARE VARIABLE MTHGAP_PREV_TEST_NPDATE_Col VARCHAR(5000);    
DECLARE VARIABLE TemplateID VARCHAR(36);
DECLARE VARIABLE RowCount Integer;

DECLARE PRETEST_AVERAGE_Column VARCHAR(5000);
DECLARE FINAL_TEST_AVERAGE_Column VARCHAR(5000);
DECLARE VARIABLE CommentPreviousEventCol VARCHAR(500);  
DECLARE V_FILTERCOUNT Integer;
DECLARE VARIABLE PartCountPreviousEventCol VARCHAR(500);  

DECLARE VARIABLE PRE_NEXT_MAINDATE_COL VARCHAR(500);
DECLARE VARIABLE PRE_NEXT_TESTDATE_COL VARCHAR(500);
DECLARE VARIABLE MONTHSGAP_PREEVTNXTMAIN_TEST_COL VARCHAR(500);
DECLARE VARIABLE MONTHSGAP_PREEVTNXTTEST_TEST_COL VARCHAR(500);
DECLARE VARIABLE IS_ONEEQUIPMENT Varchar(20);
DECLARE VARIABLE PRE_MAINTFOR_COL VARCHAR(500);
DECLARE VARIABLE PRE_DATETESTED_COL VARCHAR(500);

BEGIN
	CREATEDATE = CAST(CURRENT_TIMESTAMP AS VARCHAR(30));
    EDITDATE = REPLACE(CAST(CURRENT_DATE AS VARCHAR(10)),'-','/');
	GridDataSource = 'uspGetRVList';
	LimitSQL = '';
	FilterSQL = '';
	RETMULDATASETS = 'T';
	InvisibleVKVSql = '';
    IS_ONEEQUIPMENT = '';
    
	IF(IN_FilterClause IS NULL OR IN_FilterClause = '') THEN
	BEGIN
		IN_FilterClause = ' 1=1  ';
	END
	
	SELECT	p.EXPRESSION
	FROM	uspAppendInvisibleToFilter(:InvisibleVKVSql, :IN_USERKEY, 'InvisibleInVKV', '') p 
	INTO	:InvisibleVKVSql;
    
    BEGIN
        SELECT COUNT(*)  FROM GRIDFILTER
          WHERE GRIDDATASOURCE='uspGetParts'
          AND MOSTRECENT = 'T' AND USERKEY = :IN_USERKEY
        INTO : V_FILTERCOUNT;
        IF( V_FILTERCOUNT > 0) THEN
        BEGIN
          SELECT FILTERSQLVALUE  FROM GRIDFILTER
          WHERE GRIDDATASOURCE='uspGetParts'
          AND MOSTRECENT = 'T' AND USERKEY = :IN_USERKEY
        INTO :V_PARTFILTERSQL;
        END
    END
    
    IF(V_PARTFILTERSQL = '' OR V_PARTFILTERSQL IS NULL) THEN
    BEGIN
        V_PARTFILTERSQL = ' 1=1 ';
    END
    
	OwnerNameColumn = '(SELECT OWNERNAME FROM OWNERS t WHERE t.UNIQUEKEY = r.OWNERKEY)';
	PlantLocationColumn = '(SELECT LOCATION FROM PLANTS t WHERE t.UNIQUEKEY = r.PLANTKEY)';
	PlantAreaColumn = '(SELECT AREA FROM PLANTS t WHERE t.UNIQUEKEY = r.PLANTKEY)';
	ImgCountColumn = '(SELECT COUNT(*) FROM IMAGES t WHERE ((t.REPAIRENTRYKEY = r.UNIQUEKEY AND t.TRACKSIMAGE = ''F'') OR (t.EQUIPTRACKKEY = r.EQUIPMENTKEY AND t.TRACKSIMAGE = ''T''))' || InvisibleVKVSql || ') IMAGECOUNT';
	GenCountColumn = '(SELECT COUNT(*) FROM GENERIC t WHERE ((t.REPAIRENTRYKEY = r.UNIQUEKEY AND t.OWNEDBY = ''Repair'') OR (t.EQUIPTRACKKEY = r.EQUIPMENTKEY AND t.OWNEDBY = ''Track''))' || InvisibleVKVSql || ') GENERICCOUNT';
	ARCountColumn = '(SELECT COUNT(*) FROM AR t WHERE t.EQUIPTRACKKEY = r.EQUIPMENTKEY' || InvisibleVKVSql || ') ARCOUNT';
	ToDoCountColumn = '(SELECT COUNT(*) FROM TODOLIST t WHERE t.EQUIPTRACKKEY = r.EQUIPMENTKEY' || InvisibleVKVSql || ') TODOCOUNT';
	PartCountColumn = '(SELECT COUNT(*) FROM PARTS t WHERE t.REPAIRENTRYKEY = r.UNIQUEKEY' || InvisibleVKVSql || ') PARTCOUNT';
	PartReplacedCountColumn = '(SELECT COUNT(*) FROM PARTS t WHERE t.REPAIRENTRYKEY = r.UNIQUEKEY AND WORKPERFORMED CONTAINING ''REPLACE''' || InvisibleVKVSql || ') PARTREPLACEDCOUNT';
	PartToPlaceCountColumn = '(SELECT T.PARTTOPLACECOUNT FROM USPGETALLPREVRPRPARTTORPLCOUNT(0,R.EQUIPMENTKEY) T WHERE T.REPAIRENTRYKEY = R.UNIQUEKEY ) PARTTOREPLACECOUNT';
	PartOnOrderCountColumn = '(SELECT COUNT(*) FROM PARTS t WHERE t.REPAIRENTRYKEY = r.UNIQUEKEY AND PartOnOrder = ''T''' || InvisibleVKVSql || ') PARTONORDERCOUNT';
	PartNotGoodCountColumn = '(SELECT COUNT(*) FROM PARTS t WHERE t.REPAIRENTRYKEY = r.UNIQUEKEY AND (WorkPerformed Containing ''replace'' or Recommendation Containing ''replace'' or Recommendation Containing ''next'' or Recommendation Containing ''spare'' or RecSpare =''T'')' || InvisibleVKVSql || ') PARTNOTGOODCOUNT';
	PartsFilterCountColumn = '(SELECT COUNT(*) FROM PARTS PARTS WHERE PARTS.REPAIRENTRYKEY = r.UNIQUEKEY AND (' || V_PARTFILTERSQL || ') ' || InvisibleVKVSql || ') PARTFILTERCOUNT';
	ValveSizeColumn = 'IIF(COALESCE(INLETSIZE,'''') || COALESCE(OUTLETSIZE,'''')='''','''',COALESCE(INLETSIZE,'''') || '' '' || IIF(COALESCE(ORIFDESIGNATION,'''')='''',''x'',ORIFDESIGNATION) || '' '' || COALESCE(OUTLETSIZE,'''')) VALVESIZE';
	NextMainDateYYYYColumn = 'IIF(ISDATE(NEXTMAINDATE)=1,EXTRACT(YEAR FROM CAST(NEXTMAINDATE AS DATE)),'''') NEXTMAINDATE_YYYY';
	NextMainDateYYMMColumn = 'IIF(ISDATE(NEXTMAINDATE)=1,EXTRACT(YEAR FROM CAST(NEXTMAINDATE AS DATE)) || ''/'' || EXTRACT(MONTH FROM CAST(NEXTMAINDATE AS DATE)),'''') NEXTMAINDATE_YYMM';
	NextTestDateYYYYColumn = 'IIF(ISDATE(NEXTTESTDATE)=1,EXTRACT(YEAR FROM CAST(NEXTTESTDATE AS DATE)),'''') NEXTTESTDATE_YYYY';
	NextTestDateYYMMColumn = 'IIF(ISDATE(NEXTTESTDATE)=1,EXTRACT(YEAR FROM CAST(NEXTTESTDATE AS DATE)) || ''/'' || EXTRACT(MONTH FROM CAST(NEXTTESTDATE AS DATE)),'''') NEXTTESTDATE_YYMM';
	DateTestedYYYYColumn = 'IIF(ISDATE(DATETESTED)=1,EXTRACT(YEAR FROM CAST(DATETESTED AS DATE)),'''') DATETESTED_YYYY';
	DateTestedYYMMColumn = 'IIF(ISDATE(DATETESTED)=1,EXTRACT(YEAR FROM CAST(DATETESTED AS DATE)) || ''/'' || EXTRACT(MONTH FROM CAST(DATETESTED AS DATE)),'''') DATETESTED_YYMM';
	DateReceivedYYYYColumn = 'IIF(ISDATE(DATERECEIVED)=1,EXTRACT(YEAR FROM CAST(DATERECEIVED AS DATE)),'''') DATERECEIVED_YYYY';
	DateReceivedYYMMColumn = 'IIF(ISDATE(DATERECEIVED)=1,EXTRACT(YEAR FROM CAST(DATERECEIVED AS DATE)) || ''/'' || EXTRACT(MONTH FROM CAST(DATERECEIVED AS DATE)),'''') DATERECEIVED_YYMM';
	SinceTestedColumn = 'DATEDIFF(DAY,CAST(IIF(ISDATE(DATETESTED)=1,DATETESTED,IIF(ISDATE(DATERECEIVED)=1,DATERECEIVED,NULL)) AS DATE),CURRENT_DATE)*10000/304375 SINCETESTED';
	PastDueColumn = 'MAXVALUE(DATEDIFF(DAY,CAST(IIF(ISDATE(NEXTMAINDATE)=1,NEXTMAINDATE,NULL) AS DATE),CURRENT_DATE),-1)*10000/304375 PASTMAINDUE,MAXVALUE(DATEDIFF(DAY,CAST(IIF(ISDATE(NEXTTESTDATE)=1,NEXTTESTDATE,NULL) AS DATE),CURRENT_DATE),-1)*10000/304375 PASTTESTDUE';
	TillDueColumn = 'MAXVALUE(DATEDIFF(DAY,CURRENT_DATE,CAST(IIF(ISDATE(NEXTMAINDATE)=1,NEXTMAINDATE,NULL) AS DATE)),-1)*10000/304375 TILLMAINDUE,MAXVALUE(DATEDIFF(DAY,CURRENT_DATE,CAST(IIF(ISDATE(NEXTTESTDATE)=1,NEXTTESTDATE,NULL) AS DATE)),-1)*10000/304375 TILLTESTDUE';

	MonthsGapColumn='
	IIF((SELECT COUNT(1) FROM RELIEFD WHERE EQUIPMENTKEY = r.EQUIPMENTKEY)=1,
	''(1 Event)'',	

	IIF(MOSTRECENT = ''T'', 

	DATEDIFF(DAY, 	
		CAST (	
		(
		SELECT DISTINCT MAX(
		IIF(ISDATE(DATETESTED)=1,DATETESTED,IIF(ISDATE(DATERECEIVED)=1,DATERECEIVED,substring(DATECREATE from 1 for 4)||''/''|| substring(DATECREATE from 5 for 2) ||''/''|| substring(DATECREATE from 7 for 2)))) FROM RELIEFD WHERE EQUIPMENTKEY = r.EQUIPMENTKEY AND MOSTRECENT <> ''T'' AND 	
		ISDATE(IIF(ISDATE(DATETESTED)=1,DATETESTED,IIF(ISDATE(DATERECEIVED)=1,DATERECEIVED,substring(DATECREATE from 1 for 4)||''/''|| substring(DATECREATE from 5 for 2) ||''/''|| substring(DATECREATE from 7 for 2)))	) = 1
		) 
		AS DATE
		),

		CAST (		
		(
		SELECT DISTINCT MAX(IIF(ISDATE(DATETESTED)=1,DATETESTED,IIF(ISDATE(DATERECEIVED)=1,DATERECEIVED,substring(DATECREATE from 1 for 4)||''/''|| substring(DATECREATE from 5 for 2) ||''/''|| substring(DATECREATE from 7 for 2)))) FROM RELIEFD WHERE EQUIPMENTKEY = r.EQUIPMENTKEY AND MOSTRECENT = ''T''  AND ISDATE(IIF(ISDATE(DATETESTED)=1,DATETESTED,IIF(ISDATE(DATERECEIVED)=1,DATERECEIVED,substring(DATECREATE from 1 for 4)||''/''|| substring(DATECREATE from 5 for 2) ||''/''|| substring(DATECREATE from 7 for 2)))) = 1 
		) 
		AS DATE
		)		
		)		
		*10000/304375, 
		
		''(See MR)'')) AS MONTHSGAP ';
	DateTestedEffectiveColumn = 'IIF(ISDATE(DATETESTED)=1,DATETESTED,IIF(ISDATE(DATERECEIVED)=1,DATERECEIVED,substring(DATECREATE from 1 for 4)||''/''|| substring(DATECREATE from 5 for 2) ||''/''|| substring(DATECREATE from 7 for 2))) DATETESTEDEFFECTIVE';

	PRETEST_AVERAGE_Column  = ' CASE WHEN ((ISFLOAT(PREPOPPED) = 1) AND (ISFLOAT(PRETEST2)=1) AND (ISFLOAT(PRETEST3)=1)) THEN (CAST(PREPOPPED AS DECIMAL(18,2)) + CAST(PRETEST2 AS DECIMAL(18, 2)) + CAST(PRETEST3 AS DECIMAL(18,2))) / 3
                                    WHEN ((ISFLOAT(PREPOPPED)=1) AND (ISFLOAT(PRETEST2)=1) AND (ISFLOAT(PRETEST3)=0)) THEN (CAST(PREPOPPED AS DECIMAL(18, 2)) + CAST(PRETEST2 AS DECIMAL(18,2))) / 2 
                                    WHEN ((ISFLOAT(PREPOPPED)=1) AND (ISFLOAT(PRETEST2)=0) AND (ISFLOAT(PRETEST3)=1)) THEN (CAST(PREPOPPED AS DECIMAL(18, 2)) + CAST(PRETEST3 AS DECIMAL(18,2))) / 2                                     
                                    WHEN ((ISFLOAT(PREPOPPED)=0) AND (ISFLOAT(PRETEST2)=1) AND (ISFLOAT(PRETEST3)=1)) THEN (CAST(PRETEST2 AS DECIMAL(18, 2)) + CAST(PRETEST3 AS DECIMAL(18,2))) / 2 
                                    WHEN ((ISFLOAT(PREPOPPED)=0) AND (ISFLOAT(PRETEST2)=1) AND (ISFLOAT(PRETEST3)=0)) THEN (CAST(PRETEST2 AS DECIMAL(18, 2)))
                                    WHEN ((ISFLOAT(PREPOPPED)=0) AND (ISFLOAT(PRETEST2)=0) AND (ISFLOAT(PRETEST3)=1)) THEN (CAST(PRETEST3 AS DECIMAL(18, 2)))
                                    WHEN ((ISFLOAT(PREPOPPED)=1) AND (ISFLOAT(PRETEST2)=0) AND (ISFLOAT(PRETEST3)=0)) THEN (CAST(PREPOPPED AS DECIMAL(18, 2)))
                                    ELSE 0
                                    END AS PRETEST_AVERAGE';
    FINAL_TEST_AVERAGE_Column  = ' CASE WHEN ((ISFLOAT(FINALTESTPRESS) = 1) AND (ISFLOAT(FINALTESTPRESS2) = 1) AND (ISFLOAT(FINALTESTPRESS3) = 1)) THEN (CAST(FINALTESTPRESS AS DECIMAL(18,2)) + CAST(FINALTESTPRESS2 AS DECIMAL(18, 2)) + CAST(FINALTESTPRESS3 AS DECIMAL(18,2))) / 3
                                    WHEN ((ISFLOAT(FINALTESTPRESS) = 1) AND (ISFLOAT(FINALTESTPRESS2) = 1) AND (ISFLOAT(FINALTESTPRESS3) = 0)) THEN (CAST(FINALTESTPRESS AS DECIMAL(18, 2)) + CAST(FINALTESTPRESS2 AS DECIMAL(18,2))) / 2 
                                    WHEN ((ISFLOAT(FINALTESTPRESS) = 1) AND (ISFLOAT(FINALTESTPRESS2) = 0) AND (ISFLOAT(FINALTESTPRESS3)  = 1)) THEN (CAST(FINALTESTPRESS AS DECIMAL(18, 2)) + CAST(FINALTESTPRESS3 AS DECIMAL(18,2))) / 2 
                                    WHEN ((ISFLOAT(FINALTESTPRESS) = 0) AND (ISFLOAT(FINALTESTPRESS2) = 1) AND (ISFLOAT(FINALTESTPRESS3) = 1)) THEN (CAST(FINALTESTPRESS2 AS DECIMAL(18, 2)) + CAST(FINALTESTPRESS3 AS DECIMAL(18,2))) / 2 
                                    WHEN ((ISFLOAT(FINALTESTPRESS) = 0) AND (ISFLOAT(FINALTESTPRESS2) = 1) AND (ISFLOAT(FINALTESTPRESS3) = 0)) THEN (CAST(FINALTESTPRESS2 AS DECIMAL(18, 2))) 
                                    WHEN ((ISFLOAT(FINALTESTPRESS) = 0) AND (ISFLOAT(FINALTESTPRESS2) = 0) AND (ISFLOAT(FINALTESTPRESS3) = 1)) THEN (CAST(FINALTESTPRESS3 AS DECIMAL(18, 2))) 
                                    WHEN ((ISFLOAT(FINALTESTPRESS) = 1) AND (ISFLOAT(FINALTESTPRESS2) = 0) AND (ISFLOAT(FINALTESTPRESS3) = 0)) THEN (CAST(FINALTESTPRESS AS DECIMAL(18,2)))                                    
                                    ELSE 0
                                    END AS FINALTEST_AVERAGE';
    MonthGapColumn = '(SELECT P.MONTHGAPBETWEEN FROM  USPGETREPAIRMONGAPNPDTESTED(UNIQUEKEY, DATETESTED, DATERECEIVED,SEALID) P) MONTHGAPPREVNPDATE';
    MTHGAP_PREV_TEST_NPDATE_Col ='(SELECT P.MONTHGAPBETWEEN FROM  USPGETREPAIRMONGAPNPDTESTED(UNIQUEKEY, DATETESTED, DATERECEIVED,RDBASEMAT) P) MONTHGAPPREVTESTNPDATE';
	
	CommentPreviousEventCol = '(SELECT t.PREVIOUSA_COMMENT FROM USPGETALLPREVREPAIRCOMMENT(0,R.EQUIPMENTKEY) t WHERE t.REPAIRENTRYKEY = r.UNIQUEKEY) COMMENTPREVIOUSEVENT';	
	PartCountPreviousEventCol = '(SELECT t.PREVIOUSPARTCOUNT FROM uspGetAllPrevRepairPartCount(0,R.EQUIPMENTKEY) t WHERE t.REPAIRENTRYKEY = r.UNIQUEKEY) PARTCOUNTPREVIOUSEVENT';

	PRE_NEXT_MAINDATE_COL = '(SELECT  VD.NEXTMAINDATE FROM USPGETPREVIOUSREPAIRENTRYKEY(R.UNIQUEKEY, 0) P LEFT JOIN RELIEFD VD ON VD.UNIQUEKEY = P.PREVIOUSREPAIRENTRYKEY) PRENEXTMAINDATE';
	PRE_NEXT_TESTDATE_COL = '(SELECT  VD.NEXTTESTDATE FROM USPGETPREVIOUSREPAIRENTRYKEY(R.UNIQUEKEY, 0) P LEFT JOIN RELIEFD VD ON VD.UNIQUEKEY = P.PREVIOUSREPAIRENTRYKEY) PRENEXTTESTDATE';
    MONTHSGAP_PREEVTNXTMAIN_TEST_COL = '(SELECT IIF(ISDATE(R.DATETESTED) = 0,NULL,IIF(ISDATE(VD.NEXTMAINDATE) = 0,NULL,DATEDIFF(DAY, CAST(VD.NEXTMAINDATE AS DATE),CAST(R.DATETESTED AS DATE))*10000/304375))'||
        'FROM USPGETPREVIOUSREPAIRENTRYKEY(R.UNIQUEKEY, 0) P LEFT JOIN RELIEFD VD ON VD.UNIQUEKEY = P.PREVIOUSREPAIRENTRYKEY) AS MTHSGAPPREEVTNXTMAINTEST';
    MONTHSGAP_PREEVTNXTTEST_TEST_COL = '(SELECT IIF(ISDATE(R.DATETESTED) = 0,NULL,IIF(ISDATE(VD.NEXTTESTDATE) = 0,NULL,DATEDIFF(DAY, CAST(VD.NEXTTESTDATE AS DATE),CAST(R.DATETESTED AS DATE))*10000/304375))'||
        'FROM USPGETPREVIOUSREPAIRENTRYKEY(R.UNIQUEKEY, 0) P LEFT JOIN RELIEFD VD ON VD.UNIQUEKEY = P.PREVIOUSREPAIRENTRYKEY) AS MTHSGAPPREEVTNXTTESTTEST';
	PRE_MAINTFOR_COL = '(SELECT  VD.MAINTFOR FROM USPGETPREVIOUSREPAIRENTRYKEY(R.UNIQUEKEY, 0) P LEFT JOIN RELIEFD VD ON VD.UNIQUEKEY = P.PREVIOUSREPAIRENTRYKEY) PREMAINTFOR';
	PRE_DATETESTED_COL = '(SELECT  VD.DATETESTED FROM USPGETPREVIOUSREPAIRENTRYKEY(R.UNIQUEKEY, 0) P LEFT JOIN RELIEFD VD ON VD.UNIQUEKEY = P.PREVIOUSREPAIRENTRYKEY) PREDATETESTED';

	IF (IN_USERKEY IS NULL) THEN
	BEGIN
		SQL ='SELECT UNIQUEKEY,PLANTKEY,TAGNUMBER EQUIPMENTNAME,MOSTRECENT,DATETESTED,NEXTTESTDATE,NEXTMAINDATE,EQUIPMENTKEY,TAGNUMBER,LOOPNUMBER,SERIAL,MANUFACTURER,MODELNUMBER FROM RELIEFD WHERE 1=2';
		SUSPEND;
		EXIT;
	END
	
	    
    --RV, Selected Index is 0
    UPDATE	USERPREFERENCE u
    SET		u.SELECTEDVALVETYPE = '0'
    WHERE	u.USERKEY = :IN_USERKEY;
	
	IF (IN_COMINGDUETYPE = 0) THEN
	BEGIN
		ComingDueTo = NULL;
	END
	ELSE IF (IN_COMINGDUETYPE = 1) THEN
	BEGIN
		ComingDueTo = REPLACE(CAST(DATEADD(DAY, MOD(7 - EXTRACT(WEEKDAY FROM CURRENT_DATE), 7), CURRENT_DATE) AS Varchar(10)),'-','/');
	END
	ELSE IF (IN_COMINGDUETYPE = 2) THEN
	BEGIN
		ComingDueTo = REPLACE(CAST(DATEADD(DAY, MOD(7 - EXTRACT(WEEKDAY FROM CURRENT_DATE), 7) + 7, CURRENT_DATE) AS Varchar(10)),'-','/');
	END
	ELSE IF (IN_COMINGDUETYPE = 3) THEN
	BEGIN
		ComingDueTo = REPLACE(CAST(DATEADD(MONTH, 1, DATEADD(DAY, -EXTRACT(DAY FROM CURRENT_DATE), CURRENT_DATE)) AS Varchar(10)),'-','/');
	END
	ELSE IF (IN_COMINGDUETYPE = 4) THEN
	BEGIN
		ComingDueTo = REPLACE(CAST(DATEADD(MONTH, 2, DATEADD(DAY, -EXTRACT(DAY FROM CURRENT_DATE), CURRENT_DATE)) AS Varchar(10)),'-','/');
	END
	ELSE IF (IN_COMINGDUETYPE = 5) THEN
	BEGIN
		ComingDueTo = REPLACE(CAST(DATEADD(MONTH, 4, DATEADD(DAY, -EXTRACT(DAY FROM CURRENT_DATE), CURRENT_DATE)) AS Varchar(10)),'-','/');
	END
	ELSE IF (IN_COMINGDUETYPE = 6) THEN
	BEGIN
		ComingDueTo = REPLACE(CAST(DATEADD(MONTH, 7, DATEADD(DAY, -EXTRACT(DAY FROM CURRENT_DATE), CURRENT_DATE)) AS Varchar(10)),'-','/');
	END
	ELSE IF (IN_COMINGDUETYPE = 7) THEN
	BEGIN
		ComingDueTo = REPLACE(CAST(DATEADD(YEAR, 1, DATEADD(DAY, -EXTRACT(YEARDAY FROM CURRENT_DATE)-1, CURRENT_DATE)) AS Varchar(10)),'-','/');
	END
	ELSE IF (IN_COMINGDUETYPE = 8) THEN
	BEGIN
		ComingDueTo = EditDate;
	END
	ELSE
	BEGIN
		ComingDueTo = NULL;
	END
	
	IF (IN_INCLUDEPASTDUE = 'T') THEN
	BEGIN
		ComingDueFrom = '1900/01/01';
		IF (ComingDueTo IS NULL) THEN
		BEGIN
			ComingDueTo = EditDate;
		END
	END
	ELSE
	BEGIN
		ComingDueFrom = EditDate;
	END
	
	IF (IN_ONLYSHOWMR = 'T') THEN
	BEGIN
		IN_FilterClause = IN_FilterClause || ' AND MOSTRECENT = ''T''';
		HeaderFilterCtrlClause = ' MOSTRECENT = ''T'' ';
	END
	ELSE IF (IN_RVKEY IS NOT NULL AND IN_RVKEY <> '') THEN
	BEGIN
		SELECT	EQUIPMENTKEY
		FROM	RELIEFD
		WHERE	UNIQUEKEY = :IN_RVKEY
		INTO	:EquipKey;
		
		IN_FilterClause =  IN_FilterClause || ' AND EQUIPMENTKEY = ''' || EquipKey || '''';
        IS_ONEEQUIPMENT = 'ONEEQUIPMENT';
        HeaderFilterCtrlClause = '  EQUIPMENTKEY = ''' || EquipKey || '''';
	END
	
	IF (IN_Unit IS NOT NULL AND POSITION('unit) =', IN_FilterClause) = 0 AND POSITION('unit =', IN_FilterClause) = 0) THEN
	BEGIN
		IF (IN_Unit = '(Blank)') THEN
		BEGIN
			IN_FilterClause =  IN_FilterClause ||  ' AND (unit IS NULL OR unit ='''') ';
			HeaderFilterCtrlClause = ' (unit IS NULL OR unit ='''') ';
		END
		ELSE
		BEGIN
			IN_FilterClause =  IN_FilterClause ||  ' AND (UPPER(unit) = ''' || IN_Unit || ''') ';
			HeaderFilterCtrlClause = ' (UPPER(unit) = ''' || IN_Unit || ''') ';
		END
	END

	IF (ComingDueTo IS NOT NULL) THEN
	BEGIN
		FilterSQL = '(NEXTMAINDATE BETWEEN ''' || ComingDueFrom || ''' AND ''' || ComingDueTo  || ''' OR NEXTTESTDATE BETWEEN ''' || ComingDueFrom || ''' AND ''' || ComingDueTo  || ''')';
		HeaderFilterSQL = '(NEXTMAINDATE BETWEEN ''' || ComingDueFrom || ''' AND ''' || ComingDueTo  || ''' OR NEXTTESTDATE BETWEEN ''' || ComingDueFrom || ''' AND ''' || ComingDueTo  || ''')';
	END

	IF (IN_USINGFIELD IS NOT NULL AND IN_USINGFIELD <> '') THEN
	BEGIN
		IF (IN_USINGFIELD = 'SHIPPEDDATE') THEN
		BEGIN
			IN_USINGFIELD = 'ETEXT14';
		END
		
		DateFilterClause = IN_USINGFIELD || ' BETWEEN ''' || COALESCE(IN_DATEFROM, '1900/01/01') || ''' AND ''' || COALESCE(IN_DATETO, '9999/12/30') || '''';
		
		IF (FilterSQL <> '') THEN
		BEGIN
			FilterSQL = '(' || FilterSQL || ' AND ' || DateFilterClause  || ')';
			HeaderFilterSQL = '(' || FilterSQL || ' AND ' || DateFilterClause  || ')';
		END
		ELSE
		BEGIN
			FilterSQL = DateFilterClause;
			HeaderFilterSQL = DateFilterClause;
		END
	END
	ELSE
	BEGIN
		IN_DateFrom = '';
		IN_DATETO = '';
	END
	
	EXECUTE PROCEDURE UFGETPLANTFILTERSTRING (:IN_USERKEY, :FilterSQL, :IN_FilterClause) RETURNING_VALUES(:FilterSQL);
	EXECUTE PROCEDURE UFGETPLANTFILTERSTRING (:IN_USERKEY, :HeaderFilterSQL, :HeaderFilterCtrlClause) RETURNING_VALUES(:HeaderFilterSQL);
	
	IF (IN_Image = 'T') THEN
	BEGIN
		LimitSQL = 'IMAGECOUNT > 0';
	END
	
	IF (IN_Generic = 'T') THEN
	BEGIN
		IF(LimitSQL <> '') THEN
		BEGIN
			LimitSQL = LimitSQL || IN_ANDOR || 'GENERICCOUNT > 0';
		END
		ELSE
		BEGIN
			LimitSQL = 'GENERICCOUNT > 0';
		END
	END

	IF (IN_AR = 'T') THEN
	BEGIN
		IF(LimitSQL <> '') THEN
		BEGIN
			LimitSQL = LimitSQL || IN_ANDOR || 'ARCOUNT > 0';
		END
		ELSE
		BEGIN
			LimitSQL = 'ARCOUNT > 0';
		END
	END
	
	IF (IN_ToDo = 'T') THEN
	BEGIN
		IF(LimitSQL <> '') THEN
		BEGIN
			LimitSQL = LimitSQL || IN_ANDOR || 'TODOCOUNT > 0';
		END
		ELSE
		BEGIN
			LimitSQL = 'TODOCOUNT > 0';
		END
	END
	
	IF (IN_INPART = 'T') THEN
     BEGIN
        IF( V_FILTERCOUNT > 0) THEN
            IF(LimitSQL <> '') THEN
            BEGIN
                LimitSQL = LimitSQL || IN_ANDOR || 'PARTFILTERCOUNT > 0';
            END
            ELSE
            BEGIN
                LimitSQL = 'PARTFILTERCOUNT > 0 ';
            END
        ELSE
        BEGIN
            IF(LimitSQL <> '') THEN
            BEGIN
                LimitSQL = LimitSQL || IN_ANDOR || 'PARTFILTERCOUNT > 0';
            END
            ELSE
            BEGIN
                LimitSQL = 'PARTFILTERCOUNT > 0 ';
            END
        END
     END
     
	IF (IN_PartsReplaced = 'T') THEN
	BEGIN
		IF(LimitSQL <> '') THEN
		BEGIN
			LimitSQL = LimitSQL || IN_ANDOR || 'PARTREPLACEDCOUNT > 0';
		END
		ELSE
		BEGIN
			LimitSQL = 'PARTREPLACEDCOUNT > 0';
		END
	END	
	
	IF (IN_PartsToReplace = 'T') THEN
	BEGIN
		IF(LimitSQL <> '') THEN
		BEGIN
			LimitSQL = LimitSQL || IN_ANDOR || 'PARTTOREPLACECOUNT > 0';
		END
		ELSE
		BEGIN
			LimitSQL = 'PARTTOREPLACECOUNT > 0';
		END
	END
	
	IF (IN_PartsOnOrder = 'T') THEN
	BEGIN
		IF(LimitSQL <> '') THEN
		BEGIN
			LimitSQL = LimitSQL || IN_ANDOR || 'PARTONORDERCOUNT > 0';
		END
		ELSE
		BEGIN
			LimitSQL = 'PARTONORDERCOUNT > 0';
		END
	END

	IF (IN_PartsNotGood = 'T') THEN
	BEGIN
		IF(LimitSQL <> '') THEN
		BEGIN
			LimitSQL = LimitSQL || IN_ANDOR || 'PARTNOTGOODCOUNT > 0';
		END
		ELSE
		BEGIN
			LimitSQL = 'PARTNOTGOODCOUNT > 0';
		END
	END	
	
    SELECT	FILTERSQLVALUE
    FROM	GRIDFILTER
    WHERE	GRIDDATASOURCE=:GridDataSource || :IS_ONEEQUIPMENT
    AND		USERKEY=:IN_USERKEY
    AND		MOSTRECENT ='T'
    INTO	:FilterCtrlClause;


    IF (FilterCtrlClause <> '') THEN
    BEGIN
		FilterCtrlClause = REPLACE(FilterCtrlClause, 'RELIEFD.','r.');
        IF (FilterSQL <> '') THEN
        BEGIN
            FilterSQL = '(' || FilterSQL || ') AND (' || FilterCtrlClause || ')';
        END 
        ELSE
        BEGIN
			FilterSQL = FilterCtrlClause;
        END
        IF (HeaderFilterSQL <> '') THEN
        BEGIN
            HeaderFilterSQL = '(' || HeaderFilterSQL || ') AND (' || FilterCtrlClause || ')';
        END 
        ELSE
        BEGIN
			HeaderFilterSQL = FilterCtrlClause;
        END
    END
	
	SELECT	LIST('r.' || FIELDNAME, ',')
	FROM	(	SELECT	FIELDNAME
				FROM	GRIDDISPLAYFIELD
				WHERE	USERKEY = :IN_USERKEY
				AND		GRIDDATASOURCE = :GridDataSource
				AND		(DATATABLE <> 'GRIDCUSTOMIZEDFIELD' or FIELDNAME='CALCULATEDDATE')
				AND		FIELDNAME NOT IN ('UNIQUEKEY','MOSTRECENT', 'DATETESTED', 'NEXTTESTDATE', 'NEXTMAINDATE', 'EQUIPMENTKEY', 'TAGNUMBER', 'LOOPNUMBER', 'SERIAL', 'MANUFACTURER', 'MODELNUMBER', 'NEXTMAINFREQ', 'NEXTTESTFREQ', 'NEXTINSPFREQ', 'TRAVELLER')
				UNION
				SELECT	FIRST 1 'IMAGECOUNT'
				FROM    RDB$DATABASE
				WHERE	:IN_Image = 'T'
				UNION
				SELECT	FIRST 1 'GENERICCOUNT'
				FROM    RDB$DATABASE
				WHERE	:IN_GENERIC = 'T'
				UNION
				SELECT	FIRST 1 'ARCOUNT'
				FROM    RDB$DATABASE
				WHERE	:IN_AR = 'T'
				UNION
				SELECT	FIRST 1 'TODOCOUNT'
				FROM    RDB$DATABASE
				WHERE	:IN_TODO = 'T'
				UNION
				SELECT	FIRST 1 'PARTREPLACEDCOUNT'
				FROM    RDB$DATABASE
				WHERE	:IN_PARTSREPLACED = 'T'
				UNION
				SELECT	FIRST 1 'PARTTOREPLACECOUNT'
				FROM    RDB$DATABASE
				WHERE	:IN_PARTSTOREPLACE = 'T'
				UNION
				SELECT	FIRST 1 'PARTONORDERCOUNT'
				FROM    RDB$DATABASE
				WHERE	:IN_PARTSONORDER = 'T'
				UNION
				SELECT	FIRST 1 'PARTNOTGOODCOUNT'
				FROM    RDB$DATABASE
				WHERE	:IN_PARTSNOTGOOD = 'T'
				UNION
                SELECT	FIRST 1 'PARTFILTERCOUNT'
                FROM    RDB$DATABASE
                WHERE	:IN_INPART = 'T'
			)
	INTO	:SelectedColumns1;
	
	INSERT INTO TEMPGRIDCUSTOMIZEDFIELD ( NUMERATOR,
										  DENOMINATOR,
										  FIELDNAME,
										  FLAGRANGE,
										  FLAGTEXT,
										  DISPLAYLIKE,
										  CREATEDATE)
	SELECT	CASE WHEN USESETPRESS = 'T' AND NUMERATOR='COLDDIFFSET' THEN 'COALESCE((SELECT P.FRESULTCDTP FROM UFGETCORRECTCDTP(SETPRESSURE, COLDDIFFSET, SIZING1,MFGNPCDTP,SIZING4,REQUESTSET,PRNPCDTP,MAINTFOR, VALVESETPRESSCHANGE) P), COLDDIFFSET,SETPRESSURE)' WHEN USELEAKED = 'T' AND NUMERATOR='LEAKEDATPRESS' THEN 'COALESCE(LEAKEDATPRESS,CAST(IIF(ISFLOAT(LEAKED)=1,LEAKED,NULL) AS DECIMAL))'  WHEN NUMERATOR='RESEATPRESS' THEN 'CAST(IIF(ISFLOAT(RESEATPRESS)=1,RESEATPRESS,NULL) AS DECIMAL)' WHEN NUMERATOR='COLDDIFFSET' THEN '(SELECT P.FRESULTCDTP FROM UFGETCORRECTCDTP(SETPRESSURE, COLDDIFFSET, SIZING1,MFGNPCDTP,SIZING4,REQUESTSET,PRNPCDTP,MAINTFOR, VALVESETPRESSCHANGE) P)' ELSE NUMERATOR END AS NUMERATOR,
			CASE WHEN USESETPRESS = 'T' AND DENOMINATOR='COLDDIFFSET' THEN 'COALESCE((SELECT P.FRESULTCDTP FROM UFGETCORRECTCDTP(SETPRESSURE, COLDDIFFSET, SIZING1,MFGNPCDTP,SIZING4,REQUESTSET,PRNPCDTP,MAINTFOR, VALVESETPRESSCHANGE) P), COLDDIFFSET,SETPRESSURE)'  WHEN USELEAKED = 'T' AND DENOMINATOR='LEAKEDATPRESS' THEN 'COALESCE(LEAKEDATPRESS,CAST(IIF(ISFLOAT(LEAKED)=1,LEAKED,NULL) AS DECIMAL))' WHEN DENOMINATOR='RESEATPRESS' THEN 'CAST(IIF(ISFLOAT(RESEATPRESS)=1,RESEATPRESS,NULL) AS DECIMAL)' WHEN DENOMINATOR='COLDDIFFSET' THEN '(SELECT P.FRESULTCDTP FROM UFGETCORRECTCDTP(SETPRESSURE, COLDDIFFSET, SIZING1,MFGNPCDTP,SIZING4,REQUESTSET,PRNPCDTP,MAINTFOR, VALVESETPRESSCHANGE) P)' ELSE DENOMINATOR END AS DENOMINATOR,
			FIELDNAME,
			FLAGRANGE,
			FLAGTEXT,
			DISPLAYLIKE,
			:CREATEDATE
	FROM	GRIDCUSTOMIZEDFIELD
	WHERE	USERKEY = :IN_USERKEY
	AND		GRIDDATASOURCE = :GridDataSource
	AND		FIELDNAME <> 'CALCULATEDDATE'
	AND FIELDNAME IN 
	(
		SELECT FIELDNAME FROM GRIDDISPLAYFIELD
			WHERE USERKEY = :IN_USERKEY
			AND	GRIDDATASOURCE = :GridDataSource
			AND (FIELDNAME LIKE 'CF%' AND DATATABLE ='GRIDCUSTOMIZEDFIELD')
	);
	
	SELECT	LIST(CF, ',')
	FROM	(
	SELECT	'IIF(' || DENOMINATOR || '<> 0,IIF(ABS(CAST(IIF(ISFLOAT(' || NUMERATOR || ') = 1, ' || NUMERATOR || ', NULL) AS DECIMAL)*100.00/' || DENOMINATOR|| '-100)>' || FLAGRANGE || ',CAST (CAST(IIF(ISFLOAT(' || NUMERATOR || ') = 1, ' || NUMERATOR || ', NULL) AS DECIMAL) *100.00/' ||  DENOMINATOR || ' AS DECIMAL(10,2)) || ''%' || FLAGTEXT || ''',CAST (CAST(IIF(ISFLOAT(' || NUMERATOR || ') = 1, ' || NUMERATOR || ', NULL) AS DECIMAL)*100.00/' ||  DENOMINATOR || ' AS DECIMAL(10,2)) || ''%''),NULL) ' || FIELDNAME AS CF
	FROM	TEMPGRIDCUSTOMIZEDFIELD
	WHERE	DISPLAYLIKE = 0
	AND		CREATEDATE = :CREATEDATE
	UNION
	SELECT	'IIF(' || DENOMINATOR || '<> 0,IIF(ABS(CAST(IIF(ISFLOAT(' || NUMERATOR || ') = 1, ' || NUMERATOR || ', NULL) AS DECIMAL)*100.00/' ||  DENOMINATOR || '-100)>' || FLAGRANGE || ',CAST (CAST(IIF(ISFLOAT(' || NUMERATOR || ') = 1, ' || NUMERATOR || ', NULL) AS DECIMAL)*100.00/' || DENOMINATOR || ' AS DECIMAL(10,2)) || ''' || FLAGTEXT || ''',CAST (CAST(IIF(ISFLOAT(' || NUMERATOR || ') = 1, ' || NUMERATOR || ', NULL) AS DECIMAL)*100.00/' ||  DENOMINATOR || ' AS DECIMAL(10,2))),NULL) ' || FIELDNAME AS CF
	FROM	TEMPGRIDCUSTOMIZEDFIELD
	WHERE	DISPLAYLIKE = 1
	AND		CREATEDATE = :CREATEDATE
	UNION
	SELECT	'IIF(' || DENOMINATOR || '<> 0,IIF(ABS(CAST(IIF(ISFLOAT(' || NUMERATOR || ') = 1, ' || NUMERATOR|| ', NULL) AS DECIMAL)*100.0000/' || DENOMINATOR || '-100)>' || FLAGRANGE || ',CAST (CAST(IIF(ISFLOAT(' || NUMERATOR || ') = 1, ' || NUMERATOR || ', NULL) AS DECIMAL) *1.0000/' || DENOMINATOR || ' AS DECIMAL(10,4)) || ''' || FLAGTEXT || ''',CAST (CAST(IIF(ISFLOAT(' || NUMERATOR || ') = 1, ' || NUMERATOR || ', NULL) AS DECIMAL) *1.0000/' || DENOMINATOR || ' AS DECIMAL(10,4))),NULL) ' || FIELDNAME AS CF
	FROM	TEMPGRIDCUSTOMIZEDFIELD
	WHERE	DISPLAYLIKE = 2
	AND		CREATEDATE = :CREATEDATE)
	INTO	:SelectedColumns2;
	
	IF (SelectedColumns1 IS NOT NULL) THEN
	BEGIN
		SelectedColumns1 = ',' || SelectedColumns1;
	END
	ELSE
	BEGIN
		SelectedColumns1 = '';
	END
	
	IF (SelectedColumns2 IS NOT NULL) THEN
	BEGIN
		SelectedColumns1 = SelectedColumns1 || ',' || SelectedColumns2;
	END
	
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.CALCULATEDDATE', 'CALCULATEDDATE');

	SELECT	p.ResultColumns 
	FROM	uspAppendCalculationField(:SelectedColumns1,:IN_USERKEY,:GridDataSource) p 
	INTO	:SelectedColumns1;

	IF (FilterCtrlClause <> '') THEN
	BEGIN        
		EventCountColumn = '(SELECT COUNT(*) FROM RELIEFD t WHERE t.EQUIPMENTKEY = r.EQUIPMENTKEY) || ''('' || b.FILTERCOUNT || '')'' EVENTCOUNT';		
		FilterCountJoin = ' JOIN  ( SELECT EQUIPMENTKEY EQUIPMENTKEY2, COUNT(*) FILTERCOUNT FROM RELIEFD WHERE 1=1 GROUP BY EQUIPMENTKEY) b on (b.EQUIPMENTKEY2 = r.EQUIPMENTKEY)';		
	END
	ELSE
	BEGIN
		EventCountColumn = '(SELECT COUNT(*) FROM RELIEFD t WHERE t.EQUIPMENTKEY = r.EQUIPMENTKEY) EVENTCOUNT';
	END	
	
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.OWNERNAME', OwnerNameColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.LOCATION', PlantLocationColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.AREA', PlantAreaColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.IMAGECOUNT', ImgCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.GENERICCOUNT', GenCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.ARCOUNT', ARCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.TODOCOUNT', ToDoCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PARTCOUNTPREVIOUSEVENT', PartCountPreviousEventCol);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PARTCOUNT', PartCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PARTREPLACEDCOUNT', PartReplacedCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PARTTOREPLACECOUNT', PartToPlaceCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PARTONORDERCOUNT', PartOnOrderCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PARTNOTGOODCOUNT', PartNotGoodCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PARTFILTERCOUNT', PartsFilterCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.EVENTCOUNT', EventCountColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.VALVESIZE', ValveSizeColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.NEXTMAINDATE_YYYY', NextMainDateYYYYColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.NEXTMAINDATE_YYMM', NextMainDateYYMMColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.NEXTTESTDATE_YYYY', NextTestDateYYYYColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.NEXTTESTDATE_YYMM', NextTestDateYYMMColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.DATETESTED_YYYY', DateTestedYYYYColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.DATETESTED_YYMM', DateTestedYYMMColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.DATERECEIVED_YYYY', DateReceivedYYYYColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.DATERECEIVED_YYMM', DateReceivedYYMMColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.DATETESTEDEFFECTIVE', DateTestedEffectiveColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.SINCETESTED', SinceTestedColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PASTDUE', PastDueColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.TILLDUE', TillDueColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.MONTHSGAP', MonthsGapColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PRETEST_AVERAGE', PRETEST_AVERAGE_Column);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.FINALTEST_AVERAGE', FINAL_TEST_AVERAGE_Column);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.MONTHGAPPREVNPDATE', MonthGapColumn);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.MONTHGAPPREVTESTNPDATE', MTHGAP_PREV_TEST_NPDATE_Col);
	SelectedColumns1 = REPLACE(SelectedColumns1, 'r.COMMENTPREVIOUSEVENT', CommentPreviousEventCol);
    SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PRENEXTMAINDATE', PRE_NEXT_MAINDATE_COL);
    SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PRENEXTTESTDATE', PRE_NEXT_TESTDATE_COL);
    SelectedColumns1 = REPLACE(SelectedColumns1, 'r.MTHSGAPPREEVTNXTMAINTEST', MONTHSGAP_PREEVTNXTMAIN_TEST_COL);
    SelectedColumns1 = REPLACE(SelectedColumns1, 'r.MTHSGAPPREEVTNXTTESTTEST', MONTHSGAP_PREEVTNXTTEST_TEST_COL);
    SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PREDATETESTED', PRE_DATETESTED_COL);
    SelectedColumns1 = REPLACE(SelectedColumns1, 'r.PREMAINTFOR', PRE_MAINTFOR_COL);
    SelectedColumns1 = REPLACE(SelectedColumns1,'r.ETEXT14','r.ETEXT14 AS ETEXT141');
	SelectedColumns1 = REPLACE(SelectedColumns1,'r.NEXTINSPDATE','r.NEXTINSPDATE AS NEXTINSPDATE1');
	SelectedColumns1 = REPLACE(SelectedColumns1,'r.DATERECEIVED','r.DATERECEIVED AS DATERECEIVED1');

   IF (POSITION('R.UNIT',UPPER(SelectedColumns1)) < 1) THEN
   BEGIN
	SelectedColumns1 = SelectedColumns1 ||',r.UNIT';
	END

    SQL ='SELECT * FROM (SELECT r.UNIQUEKEY,r.OWNERKEY,r.PLANTKEY,r.TAGNUMBER EQUIPMENTNAME,r.MOSTRECENT,r.DATETESTED,r.ETEXT14,r.NEXTINSPDATE,r.DATERECEIVED,r.NEXTTESTDATE,r.NEXTMAINDATE,r.EQUIPMENTKEY,r.TAGNUMBER,r.LOOPNUMBER,r.SERIAL,r.MANUFACTURER,r.MODELNUMBER,r.NEXTMAINFREQ,r.NEXTTESTFREQ,r.NEXTINSPFREQ,r.TRAVELLER' || SelectedColumns1 || ' FROM RELIEFD r ';
		
	IF (FilterSQL <> '') THEN
	BEGIN
		IF (POSITION('DATETESTEDEFFECTIVE',UPPER(FilterSQL)) > 0) THEN
		BEGIN
			FilterSQL = REPLACE(FilterSQL, 'DATETESTEDEFFECTIVE','IIF(ISDATE(DATETESTED)=1,DATETESTED,IIF(ISDATE(DATERECEIVED)=1,DATERECEIVED,substring(DATECREATE from 1 for 4)||''/''|| substring(DATECREATE from 5 for 2) ||''/''|| substring(DATECREATE from 7 for 2)))');
		END
	END
	IF (FilterCtrlClause <> '') THEN
	BEGIN
		--FilterCountJoin = REPLACE(FilterCountJoin, '1=1', REPLACE(FilterSQL, 'r.',''));		
		SQL = SQL || FilterCountJoin || ') WHERE ' || replace(FilterSQL,'r.','');
	END
	ELSE
	BEGIN
        SQL = SQL || ' WHERE ' || HeaderFilterSQL || ') WHERE ' || FilterSQL;
	END
		
	IF (POSITION(SinceTestedColumn,SelectedColumns1) > 0 OR POSITION(PastDueColumn,SelectedColumns1) > 0 OR POSITION(TillDueColumn,SelectedColumns1) > 0) THEN
	BEGIN
		SELECT	LIST(FIELDNAME, ',')
		FROM	GRIDDISPLAYFIELD
		WHERE	USERKEY = :IN_USERKEY
		AND		GRIDDATASOURCE = :GridDataSource
		AND		FIELDNAME NOT IN ('UNIQUEKEY','MOSTRECENT', 'DATETESTED', 'NEXTTESTDATE', 'NEXTMAINDATE', 'EQUIPMENTKEY', 'TAGNUMBER', 'LOOPNUMBER', 'SERIAL', 'MANUFACTURER', 'MODELNUMBER', 'NEXTMAINFREQ','NEXTTESTFREQ','NEXTINSPFREQ' ,'TRAVELLER')
		INTO	:SelectedColumns1;

		IF (SelectedColumns1 IS NOT NULL) THEN
		BEGIN
			SelectedColumns1 = 'UNIQUEKEY,OWNERKEY,PLANTKEY,TAGNUMBER EQUIPMENTNAME,MOSTRECENT,DATETESTED,ETEXT14,NEXTINSPDATE,DATERECEIVED,NEXTTESTDATE,NEXTMAINDATE,EQUIPMENTKEY,TAGNUMBER,LOOPNUMBER,SERIAL,MANUFACTURER,MODELNUMBER,NEXTMAINFREQ,NEXTTESTFREQ,NEXTINSPFREQ,TRAVELLER,' || SelectedColumns1;
		END
		ELSE
		BEGIN
			SelectedColumns1 = 'UNIQUEKEY,OWNERKEY,PLANTKEY,TAGNUMBER EQUIPMENTNAME,MOSTRECENT,DATETESTED,ETEXT14,NEXTINSPDATE,DATERECEIVED,NEXTTESTDATE,NEXTMAINDATE,EQUIPMENTKEY,TAGNUMBER,LOOPNUMBER,SERIAL,MANUFACTURER,MODELNUMBER,NEXTMAINFREQ,NEXTTESTFREQ,NEXTINSPFREQ,TRAVELLER';
		END

		EXECUTE PROCEDURE UFGETTEMPLATEIDBYUSER(:IN_USERKEY) RETURNING_VALUES(:TemplateID);

		SELECT  COUNT(*)
		FROM    FIELDDEFINITION
		WHERE   TEMPLATEID = :TemplateID
		AND		DATATABLE = 'RELIEFD'
		AND		DATAFIELD = 'NEXTMAINDATE'
		AND		USERNAME CONTAINING 'NEXT'
		INTO	:RowCount;

		IF (RowCount > 0) THEN
		BEGIN
			SinceTestedColumn = 'SINCETESTED || IIF(SINCETESTED>NEXTMAINFREQ,'' *Maint'','''')';
		END
		ELSE
		BEGIN
			SinceTestedColumn = 'SINCETESTED';
		END

		PastDueColumn = 'IIF(MOSTRECENT=''T'' AND PASTMAINDUE>0,PASTMAINDUE,'''') PASTDUE';
		TillDueColumn = 'IIF(MOSTRECENT=''T'' AND TILLMAINDUE>0,TILLMAINDUE,'''') TILLDUE';

		SELECT  COUNT(*)
		FROM    FIELDDEFINITION
		WHERE   TEMPLATEID = :TemplateID
		AND		DATATABLE = 'RELIEFD'
		AND		DATAFIELD = 'NEXTTESTDATE'
		AND		USERNAME CONTAINING 'NEXT'
		INTO	:RowCount;

		IF (RowCount > 0) THEN
		BEGIN
			SinceTestedColumn = SinceTestedColumn || ' || IIF(SINCETESTED>NEXTTESTFREQ,'' ~Test'','''')';
			PastDueColumn = 'IIF(MOSTRECENT=''T'',IIF(PASTMAINDUE>-1,PASTMAINDUE,'''') || IIF(PASTTESTDUE>-1 AND PASTMAINDUE<>PASTTESTDUE,'' & For Test:'' || PASTTESTDUE,''''),'''') PASTDUE';
			TillDueColumn = 'IIF(MOSTRECENT=''T'',IIF(TILLMAINDUE>0,TILLMAINDUE,'''') || IIF(TILLTESTDUE>0 AND TILLMAINDUE<>TILLTESTDUE,'' & For Test:'' || TILLTESTDUE,''''),'''') TILLDUE';
		END

		SELECT  COUNT(*)
		FROM    FIELDDEFINITION
		WHERE   TEMPLATEID = :TemplateID
		AND		DATATABLE = 'RELIEFD'
		AND		DATAFIELD = 'NEXTINSPDATE'
		AND		USERNAME CONTAINING 'NEXT'
		INTO	:RowCount;

		IF (RowCount > 0) THEN
		BEGIN
			SinceTestedColumn = SinceTestedColumn || ' || IIF(SINCETESTED>NEXTINSPFREQ,'' ^Insp'','''')';
		END

		SelectedColumns1 = REPLACE(SelectedColumns1, 'SINCETESTED', SinceTestedColumn || ' SINCETESTED');
		SelectedColumns1 = REPLACE(SelectedColumns1, 'PASTDUE', PastDueColumn );
		SelectedColumns1 = REPLACE(SelectedColumns1, 'TILLDUE', TillDueColumn );

		SQL = 'SELECT  ' || SelectedColumns1 || ' FROM (' || REPLACE(REPLACE(SQL, 'PASTDUE','PASTTESTDUE'), 'TILLDUE', 'TILLTESTDUE') || ' ) ';

		IF (LimitSQL <> '') THEN
		BEGIN
			IF (IN_TARFILTER IS NOT NULL) THEN
			BEGIN
				SQL = SQL || ' F WHERE ' || LimitSQL || IN_ANDOR || ' (EXISTS(SELECT 1 FROM JOBLIST J WHERE J.JOBNUMKEY=''' || IN_TARFILTER || ''' AND F.UNIQUEKEY= J.REPAIRENTRYKEY)) ';
			END
			ELSE
			BEGIN
				SQL = SQL || ' F WHERE ' || LimitSQL ;
			END
		END
		ELSE
		BEGIN
            IF (IN_TARFILTER IS NOT NULL) THEN
			BEGIN
				SQL = SQL || ' F  WHERE ' || ' (EXISTS(SELECT 1 FROM JOBLIST J WHERE J.JOBNUMKEY=''' || IN_TARFILTER || ''' AND F.UNIQUEKEY= J.REPAIRENTRYKEY)) ';
			END
			--ELSE
			--BEGIN
				--SQL = SQL || ' W WHERE ' || LimitSQL ;
			--END
		END
	END
	ELSE IF (LimitSQL <> '') THEN
	BEGIN
		IF (IN_TARFILTER IS NOT NULL) THEN
			BEGIN
				SQL = 'SELECT *  FROM (' || SQL || ') F WHERE ' || LimitSQL || IN_ANDOR || ' (EXISTS(SELECT 1 FROM JOBLIST J WHERE J.JOBNUMKEY=''' || IN_TARFILTER || '''  AND F.UNIQUEKEY= J.REPAIRENTRYKEY)) ';
			END
			ELSE
			BEGIN
				SQL = 'SELECT  *  FROM (' || SQL || ') WHERE ' || LimitSQL;
			END
	END
	ELSE
	BEGIN
        IF (IN_TARFILTER IS NOT NULL) THEN
			BEGIN
				SQL = 'SELECT  *  FROM (' || SQL || ') F WHERE (EXISTS(SELECT 1 FROM JOBLIST J WHERE J.JOBNUMKEY=''' || IN_TARFILTER || ''' AND F.UNIQUEKEY= J.REPAIRENTRYKEY)) ';
			END
			ELSE
			BEGIN
				SQL = 'SELECT  *  FROM (' || SQL || ')';
			END
	END
	


	IF (IN_USINGFIELD = 'ETEXT14') THEN
	BEGIN
		IN_USINGFIELD = 'SHIPPEDDATE';
	END

	EXECUTE PROCEDURE USPSAVEREPAIRLISTFILTER(:IN_USERKEY, :IN_ONLYSHOWMR, :IN_RVKEY, :IN_PARTSREPLACED, :IN_PARTSTOREPLACE, :IN_PARTSONORDER, :IN_PARTSNOTGOOD, :IN_COMINGDUETYPE, :IN_INCLUDEPASTDUE, :IN_USINGFIELD, :IN_DATEFROM, :IN_DATETO, :IN_ANDOR, :IN_IMAGE, :IN_GENERIC, :IN_TODO, :IN_INPART, :IN_INAR, :IN_INWELD, :IN_INPOSITIONER, :IN_INLOCATION, :IN_INGENERIC, :IN_Unit, :IN_TARFILTER, :IN_TARFILTERLABEL,0);
		
	SUSPEND;
END^
SET TERM ; ^

GRANT EXECUTE
 ON PROCEDURE USPGETRVLISTBYUSER TO  SYSDBA;

