create or replace PROCEDURE "USPSAVETODO" 
(		
		IN_IsInsert		IN Char,
		IN_UserID		IN Varchar2,
        IN_UNIQUEKEY IN Varchar2,
        IN_OWNERKEY IN Varchar2,
        IN_PLANTKEY IN Varchar2,
        IN_EQUIPTRACKKEY IN Varchar2,
        IN_REPAIRENTRYKEY IN Varchar2,
        IN_EQUIPMENTTYPE IN NVARCHAR2,
        IN_EQUIPNUM NUMBER,
        IN_TAGNUMBER IN NVARCHAR2,
        IN_LOOPNUMBER NUMBER,
        IN_SERIAL IN NVARCHAR2,
        IN_EQUIPLOCN IN NVARCHAR2,
        IN_EXTRA IN NVARCHAR2,
        IN_DATECREATED IN Varchar2,
        IN_DATEEXPIRE IN Varchar2,
        IN_DATEHANDLED IN Varchar2,
        IN_DATEEXTRA IN Varchar2,
        IN_ISSUEKEYWORD IN NVARCHAR2,
        IN_ADDEDBY IN NVARCHAR2,
        IN_HANDLEDBY IN NVARCHAR2,
        IN_BURGENT IN Char,
        IN_BHANDLED IN Char,
        IN_BSPECIAL IN Char,
        IN_BFLAG IN Char,
        IN_BINVISIBLE IN Char,
        IN_NOTE1 NCLOB,
        IN_E5 IN NVARCHAR2,
        IN_E6 IN NVARCHAR2,
        IN_E7 IN NVARCHAR2,
        IN_N1 NUMBER,
        IN_N2 NUMBER,
        IN_EI11 NUMBER,
        IN_EI12 NUMBER,
        IN_EXTRA100 IN NVARCHAR2,
        IN_EXTRA101 IN NVARCHAR2,
        IN_EXTRA102 IN NVARCHAR2,
        IN_EXTRA103 IN NVARCHAR2,
        IN_EXTRA104 IN NVARCHAR2,
        IN_N100 NUMBER,
        IN_N101 NUMBER,
        IN_B1 IN Char,
        IN_B2 IN Char,
        IN_B3 IN Char,
        IN_B4 IN Char,
        IN_B5 IN Char,
        IN_INVISIBLEINVKV IN Char,
        IN_NOTEITEM IN Char,
        IN_RECPOSTEDBY IN NVARCHAR2,
        IN_RECCREATEDBY IN NVARCHAR2
)
AS
v_TENANTKEY	VARCHAR2(40);
BEGIN

/*
**  File:        uspSaveToDo.sql
**  Description: Save todo entry
**  Returns:     
**  Params:      :IN_UserID - The logged on users number
*******************************************************************************
**  Change History
*******************************************************************************
**	Author	        Date					    Description
**	Marco Cao	    2010/11/03		  		Original.
**	Jerry Chen		2015/04/10			Convert to Oracle
**	Marco Cao		2015/08/21			Use NUL to juge NULL
**	Marco Cao		2015/08/26			Use NUL to juge NULL when insert
**	
*/

	v_TENANTKEY := 	UFGETTENANTKEYBYUSER(IN_UserID);

	IF (IN_IsInsert = 'T') THEN
	BEGIN
		INSERT INTO TODOLIST
           (UNIQUEKEY
		   ,TENANTKEY
           ,OWNERKEY
           ,PLANTKEY
           ,EQUIPTRACKKEY
           ,REPAIRENTRYKEY
           ,EQUIPMENTTYPE
           ,EQUIPNUM
           ,TAGNUMBER
           ,LOOPNUMBER
           ,SERIAL
           ,EQUIPLOCN
           ,EXTRA
           ,DATECREATED
           ,DATEEXPIRE
           ,DATEHANDLED
           ,DATEEXTRA
           ,ISSUEKEYWORD
           ,ADDEDBY
           ,HANDLEDBY
           ,BURGENT
           ,BHANDLED
           ,BSPECIAL
           ,BFLAG
           ,BINVISIBLE
           ,NOTE1
           ,E5
           ,E6
           ,E7
           ,N1
           ,N2
           ,EI11
           ,EI12
           ,EXTRA100
           ,EXTRA101
           ,EXTRA102
           ,EXTRA103
           ,EXTRA104
           ,N100
           ,N101
           ,B1
           ,B2
           ,B3
           ,B4
           ,B5
           ,INVISIBLEINVKV
           ,NOTEITEM
           ,RECPOSTEDBY
           ,RECCREATEDBY)
     VALUES
           (IN_UNIQUEKEY,
		   v_TENANTKEY,
		   DECODE(IN_OWNERKEY, 'NUL', NULL,  IN_OWNERKEY),
           DECODE(IN_PLANTKEY, 'NUL', NULL,  IN_PLANTKEY),
           DECODE(IN_EQUIPTRACKKEY, 'NUL', NULL,  IN_EQUIPTRACKKEY), 
           DECODE(IN_REPAIRENTRYKEY, 'NUL', NULL,  IN_REPAIRENTRYKEY), 
           DECODE(IN_EQUIPMENTTYPE, 'NUL', NULL,  IN_EQUIPMENTTYPE), 
           DECODE(IN_EQUIPNUM, 'NUL', NULL,  IN_EQUIPNUM), 
           DECODE(IN_TAGNUMBER, 'NUL', NULL,  IN_TAGNUMBER), 
           DECODE(IN_LOOPNUMBER, 'NUL', NULL,  IN_LOOPNUMBER), 
           DECODE(IN_SERIAL, 'NUL', NULL,  IN_SERIAL), 
           DECODE(IN_EQUIPLOCN, 'NUL', NULL,  IN_EQUIPLOCN), 
           DECODE(IN_EXTRA, 'NUL', NULL,  IN_EXTRA), 
           DECODE(IN_DATECREATED, 'NUL', NULL,  IN_DATECREATED), 
           DECODE(IN_DATEEXPIRE, 'NUL', NULL,  IN_DATEEXPIRE), 
           DECODE(IN_DATEHANDLED, 'NUL', NULL,  IN_DATEHANDLED),
           DECODE(IN_DATEEXTRA, 'NUL', NULL,  IN_DATEEXTRA), 
           DECODE(IN_ISSUEKEYWORD, 'NUL', NULL,  IN_ISSUEKEYWORD), 
           DECODE(IN_ADDEDBY, 'NUL', NULL,  IN_ADDEDBY), 
           DECODE(IN_HANDLEDBY, 'NUL', NULL,  IN_HANDLEDBY),
           DECODE(IN_BURGENT, 'NUL', NULL,  IN_BURGENT), 
           DECODE(IN_BHANDLED, 'NUL', NULL,  IN_BHANDLED), 
           DECODE(IN_BSPECIAL, 'NUL', NULL,  IN_BSPECIAL), 
           DECODE(IN_BFLAG, 'NUL', NULL,  IN_BFLAG), 
           DECODE(IN_BINVISIBLE, 'NUL', NULL,  IN_BINVISIBLE), 
           DECODE(TO_CHAR(IN_NOTE1), 'NUL', NULL,  IN_NOTE1), 
           DECODE(IN_E5, 'NUL', NULL,  IN_E5), 
           DECODE(IN_E6, 'NUL', NULL,  IN_E6), 
           DECODE(IN_E7, 'NUL', NULL,  IN_E7), 
           DECODE(IN_N1, 'NUL', NULL,  IN_N1), 
           DECODE(IN_N2, 'NUL', NULL,  IN_N2), 
           DECODE(IN_EI11, 'NUL', NULL,  IN_EI11), 
           DECODE(IN_EI12, 'NUL', NULL,  IN_EI12), 
           DECODE(IN_EXTRA100, 'NUL', NULL,  IN_EXTRA100), 
           DECODE(IN_EXTRA101, 'NUL', NULL,  IN_EXTRA101), 
           DECODE(IN_EXTRA102, 'NUL', NULL,  IN_EXTRA102), 
           DECODE(IN_EXTRA103, 'NUL', NULL,  IN_EXTRA103), 
           DECODE(IN_EXTRA104, 'NUL', NULL,  IN_EXTRA104), 
           DECODE(IN_N100, 'NUL', NULL,  IN_N100), 
           DECODE(IN_N101, 'NUL', NULL,  IN_N101), 
           DECODE(IN_B1, 'NUL', NULL,  IN_B1), 
           DECODE(IN_B2, 'NUL', NULL,  IN_B2), 
           DECODE(IN_B3, 'NUL', NULL,  IN_B3), 
           DECODE(IN_B4, 'NUL', NULL,  IN_B4), 
           DECODE(IN_B5, 'NUL', NULL,  IN_B5), 
           DECODE(IN_INVISIBLEINVKV, 'NUL', NULL,  IN_INVISIBLEINVKV),
           DECODE(IN_NOTEITEM, 'NUL', NULL,  IN_NOTEITEM), 
           DECODE(IN_RECPOSTEDBY, 'NUL', NULL,  IN_RECPOSTEDBY), 
           DECODE(IN_RECCREATEDBY, 'NUL', NULL,  IN_RECCREATEDBY));
	END;
	ELSE
	BEGIN
	  UPDATE TODOLIST
	   SET OWNERKEY = DECODE(IN_OWNERKEY, 'NUL', NULL, NVL(IN_OWNERKEY, OWNERKEY)) 
		  ,PLANTKEY = DECODE(IN_PLANTKEY, 'NUL', NULL, NVL(IN_PLANTKEY, PLANTKEY)) 
		  ,EQUIPTRACKKEY = DECODE(IN_EQUIPTRACKKEY, 'NUL', NULL, NVL(IN_EQUIPTRACKKEY, EQUIPTRACKKEY)) 
		  ,REPAIRENTRYKEY = DECODE(IN_REPAIRENTRYKEY, 'NUL', NULL, NVL(IN_REPAIRENTRYKEY, REPAIRENTRYKEY)) 
		  ,EQUIPMENTTYPE = DECODE(IN_EQUIPMENTTYPE, 'NUL', NULL, NVL(IN_EQUIPMENTTYPE, EQUIPMENTTYPE)) 
		  ,EQUIPNUM =DECODE(IN_EQUIPNUM, 'NUL', NULL, NVL(IN_EQUIPNUM, EQUIPNUM))  
		  ,TAGNUMBER = DECODE(IN_TAGNUMBER, 'NUL', NULL, NVL(IN_TAGNUMBER, TAGNUMBER))
		  ,LOOPNUMBER = DECODE(IN_LOOPNUMBER, 'NUL', NULL, NVL(IN_LOOPNUMBER, LOOPNUMBER))
		  ,SERIAL = DECODE(IN_SERIAL, 'NUL', NULL, NVL(IN_SERIAL, SERIAL))
		  ,EQUIPLOCN = DECODE(IN_EQUIPLOCN, 'NUL', NULL, NVL(IN_EQUIPLOCN, EQUIPLOCN))
		  ,EXTRA = DECODE(IN_EXTRA, 'NUL', NULL, NVL(IN_EXTRA, EXTRA))
		  ,DATECREATED = DECODE(IN_DATECREATED, 'NUL', NULL, NVL(IN_DATECREATED, DATECREATED))
		  ,DATEEXPIRE = DECODE(IN_DATEEXPIRE, 'NUL', NULL, NVL(IN_DATEEXPIRE, DATEEXPIRE))
		  ,DATEHANDLED = DECODE(IN_DATEHANDLED, 'NUL', NULL, NVL(IN_DATEHANDLED, DATEHANDLED))
		  ,DATEEXTRA = DECODE(IN_DATEEXTRA, 'NUL', NULL, NVL(IN_DATEEXTRA, DATEEXTRA))
		  ,ISSUEKEYWORD = DECODE(IN_ISSUEKEYWORD, 'NUL', NULL, NVL(IN_ISSUEKEYWORD, ISSUEKEYWORD))
		  ,ADDEDBY = DECODE(IN_ADDEDBY, 'NUL', NULL, NVL(IN_ADDEDBY, ADDEDBY))
		  ,HANDLEDBY = DECODE(IN_HANDLEDBY, 'NUL', NULL, NVL(IN_HANDLEDBY, HANDLEDBY))
		  ,BURGENT = DECODE(IN_BURGENT, 'NUL', NULL, NVL(IN_BURGENT, BURGENT))
		  ,BHANDLED = DECODE(IN_BHANDLED, 'NUL', NULL, NVL(IN_BHANDLED, BHANDLED))
		  ,BSPECIAL = DECODE(IN_BSPECIAL, 'NUL', NULL, NVL(IN_BSPECIAL, BSPECIAL))
		  ,BFLAG = DECODE(IN_BSPECIAL, 'NUL', NULL, NVL(IN_BSPECIAL, BSPECIAL))
		  ,BINVISIBLE = DECODE(IN_BINVISIBLE, 'NUL', NULL, NVL(IN_BINVISIBLE, BINVISIBLE))
		  ,NOTE1 = DECODE(TO_CHAR(IN_NOTE1), 'NUL', NULL, NVL(IN_NOTE1, NOTE1))
		  ,E5 = DECODE(IN_E5, 'NUL', NULL, NVL(IN_E5, E5))
		  ,E6 = DECODE(IN_E6, 'NUL', NULL, NVL(IN_E6, E6))
		  ,E7 = DECODE(IN_E7, 'NUL', NULL, NVL(IN_E7, E7))
		  ,N1 = DECODE(IN_N1, 'NUL', NULL, NVL(IN_N1, N1))
		  ,N2 = DECODE(IN_N2, 'NUL', NULL, NVL(IN_N2, N2))
		  ,EI11 = DECODE(IN_EI11, 'NUL', NULL, NVL(IN_EI11, EI11))
		  ,EI12 = DECODE(IN_EI12, 'NUL', NULL, NVL(IN_EI12, EI12))
		  ,EXTRA100 = DECODE(IN_EXTRA100, 'NUL', NULL, NVL(IN_EXTRA100, EXTRA100))
		  ,EXTRA101 = DECODE(IN_EXTRA101, 'NUL', NULL, NVL(IN_EXTRA101, EXTRA101))
		  ,EXTRA102 = DECODE(IN_EXTRA102, 'NUL', NULL, NVL(IN_EXTRA102, EXTRA102))
		  ,EXTRA103 = DECODE(IN_EXTRA103, 'NUL', NULL, NVL(IN_EXTRA103, EXTRA103))
		  ,EXTRA104 = DECODE(IN_EXTRA104, 'NUL', NULL, NVL(IN_EXTRA104, EXTRA104))
		  ,N100 = DECODE(IN_N100, 'NUL', NULL, NVL(IN_N100, N100))
		  ,N101 = DECODE(IN_N101, 'NUL', NULL, NVL(IN_N101, N101))
		  ,B1 = DECODE(IN_B1, 'NUL', NULL, NVL(IN_B1, B1))
		  ,B2 = DECODE(IN_B2, 'NUL', NULL, NVL(IN_B2, B2))
		  ,B3 = DECODE(IN_B3, 'NUL', NULL, NVL(IN_B3, B3))
		  ,B4 = DECODE(IN_B4, 'NUL', NULL, NVL(IN_B4, B4))
		  ,B5 = DECODE(IN_B5, 'NUL', NULL, NVL(IN_B5, B5))
		  ,INVISIBLEINVKV = DECODE(IN_INVISIBLEINVKV, 'NUL', NULL, NVL(IN_INVISIBLEINVKV, INVISIBLEINVKV))
		  ,NOTEITEM = DECODE(IN_NOTEITEM, 'NUL', NULL, NVL(IN_NOTEITEM, NOTEITEM))
		  ,RECPOSTEDBY = DECODE(IN_RECPOSTEDBY, 'NUL', NULL, NVL(IN_RECPOSTEDBY, RECPOSTEDBY))
		  ,RECCREATEDBY = DECODE(IN_RECCREATEDBY, 'NUL', NULL, NVL(IN_RECCREATEDBY, RECCREATEDBY))
		WHERE   UNIQUEKEY = IN_UNIQUEKEY AND TENANTKEY=v_TENANTKEY;

		IF (IN_NOTE1 = 'NUL') THEN
			UPDATE TODOLIST
			SET NOTE1 = NULL
			WHERE   UNIQUEKEY = IN_UNIQUEKEY AND TENANTKEY=v_TENANTKEY;
		END IF;
	END;
END IF;
END USPSAVETODO;